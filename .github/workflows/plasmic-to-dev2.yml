# Plasmic workflow v3
name: Sync, build and deploy Plasmic app in development in Netlify

permissions:
  contents: write

on:
  repository_dispatch:
    types: [plasmic]

on:
  workflow_dispatch:

jobs:
  job:
    name: Sync, build and deploy
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Echo payload
        run: |
          echo Hello ${{ toJSON(github.event) }}

      - id: checkout
        name: Checking out repository...
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - id: node
        name: Setting up node v16...
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - id: cache
        name: Recovering cache...
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - id: init
        name: Initializing Plasmic app...
        uses: plasmicapp/plasmic-action@master
        with:
          run: init
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.client_payload.data.branch }}
          directory: ${{ github.event.client_payload.data.directory }}
          project_id: ${{ github.event.client_payload.data.projectId }}
          project_api_token: ${{ github.event.client_payload.data.projectApiToken }}
          platform: ${{ github.event.client_payload.data.platform }}
          language: ${{ github.event.client_payload.data.language }}
          scheme: ${{ github.event.client_payload.data.scheme }}
          title: ${{ github.event.client_payload.data.title }}
          description: ${{ github.event.client_payload.data.description }}
